{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskTitle","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setAppInitializedAC","changeTodolistEntityStatusAC","updateTaskTC","domainModel","todoListId","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","taskID","todoListID","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","onClickAddItem","validatedTitle","trim","errorMessage","style","color","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","AddBox","EditableSpan","props","log","editMode","setEditMode","offEditMode","changeTitle","Input","autoFocus","onBlur","onDoubleClick","Task","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","newValue","changeTaskTitle","removeTask","Delete","TodoList","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","allTodolistTasks","tasksForTodolist","filter","tasksJSXElements","map","addTask","useCallback","changeTodoListTitle","onClickAllFilter","changeFilter","onClickActiveFilter","onClickCompletedFilter","removeTodoList","entityStatus","Button","TodolistsList","todoLists","useSelector","state","todolists","auth","tasksId","removeTaskAC","item","addTaskTC","changeTodoListFilter","changeTodolistFilterAC","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodoList","addTodolistTC","Grid","container","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackbars","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c082b43.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'api-key': '36c47461-cd5e-48a2-a6d3-2dd87b11456f'\r\n  }\r\n}\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    const promise = instance.get<TodolistType[]>('todo-lists');\r\n    return promise;\r\n  },\r\n  createTodolist(title: string) {\r\n    const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    return promise;\r\n  },\r\n  deleteTodolist(id: string) {\r\n    const promise = instance.delete<ResponseType>(`todo-lists/${id}`)\r\n      // : new Promise((res, rej) => {res({errorEmulation})}); // tried to fix server error\r\n      // : 'id is required';\r\n    return promise;\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    return promise;\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  createTask(todolistId: string, taskTitle: string) {\r\n    let promise = instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    return promise\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n  }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    return promise;\r\n  },\r\n  logout() {\r\n    const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    return promise;\r\n  },\r\n  me() {\r\n    const promise = instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n    return promise\r\n  }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n  fieldsErrors: Array<string>\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: D\r\n}\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = <D>(error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n","import {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\": {\r\n            return {...state, isInitialized: action.value}\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // есть ли ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppInitializedAC(true))\r\n        } else {\r\n\r\n        }\r\n        dispatch(setAppInitializedAC(true))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', filter, id} as const)\r\nexport const changeTodolistEntityStatusAC = (status: RequestStatusType, id: string) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', status, id} as const)\r\nexport const changeTodolistTitleAC = (title: string, id: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', title, id} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: \"SET-TODOLISTS\", todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (id: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC('loading', id))\r\n        todolistsAPI.deleteTodolist(id)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(id))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC('idle', id))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (title: string, id: string,) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(title, id))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodoListActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type ActionType =\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppStatusActionType | SetAppErrorActionType>","import {AddTodoListActionType, RemoveTodoListActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.tasksId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskID ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = [];\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (tasksId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', tasksId: tasksId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskID: string, model: UpdateDomainTaskModelType, todoListID: string) =>\r\n    ({type: 'UPDATE-TASK', taskID, model, todoListID} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todoListID: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todoListID, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error('task not found it the state')\r\n            console.warn('task not found it the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todoListId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todoListId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n  const [title, setTitle] = useState('')\r\n  const [error, setError] = useState<boolean | string>(false)\r\n\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    if (error !== null) {\r\n      setError(false)\r\n    }\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      onClickAddItem()\r\n    }\r\n  }\r\n  const onClickAddItem = () => {\r\n    const validatedTitle = title.trim()\r\n    if (validatedTitle) {\r\n      addItem(validatedTitle)\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setTitle('')\r\n  }\r\n\r\n  const errorMessage = error\r\n    ? <div style={{color: 'red'}}>Title is required!</div>\r\n    : null\r\n\r\n  return (\r\n    <div>\r\n      <TextField variant=\"outlined\"\r\n                 disabled={disabled}\r\n                 error={!!error}\r\n                 value={title}\r\n                 onChange={onChangeTitle}\r\n                 onKeyPress={onKeyPressAddItem}\r\n                 label='Text'\r\n                 helperText={errorMessage}\r\n      />\r\n      <IconButton color='primary' onClick={onClickAddItem} disabled={disabled}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n}\r\n\r\n const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n  console.log('EditableSpan called')\r\n  const [title, setTitle] = useState<string>(props.title)\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const onEditMode = () => setEditMode(true)\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeTitle(title)\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n  const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      offEditMode()\r\n    }\r\n  }\r\n\r\n  return (\r\n    editMode\r\n      ? <Input\r\n        color={'primary'}\r\n        value={title}\r\n        autoFocus\r\n        onBlur={offEditMode}\r\n        onChange={onChangeTitle}\r\n        onKeyPress={onEnterPressOffEditMode}\r\n      />\r\n      : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n  )\r\n})\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n  todolistId: string\r\n  task: TaskType\r\n  changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n\r\n  // console.log('Task')\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n  }\r\n\r\n  const onTitleChangeHandler = (newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n  }\r\n\r\n  const onClickHandler = () => {\r\n    props.removeTask(props.task.id, props.todolistId)\r\n  }\r\n\r\n  return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n    <Checkbox\r\n      checked={props.task.status === TaskStatuses.Completed}\r\n      color=\"primary\"\r\n      onChange={onChangeHandler}\r\n    />\r\n    <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n    <IconButton onClick={onClickHandler}>\r\n      <Delete/>\r\n    </IconButton>\r\n  </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from '../../../components/AddItemForm/AddItemForm';\r\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\ntype PropsType = {\r\n  todolist: TodoListDomainType\r\n  tasks: Array<TaskType>\r\n  addTask: (title: string, todoListID: string) => void\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  changeFilter: (FilterValues: FilterValuesType, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n  changeTodoListTitle: (title: string, todoListID: string) => void\r\n  demo?: boolean\r\n}\r\n\r\nconst TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\r\n  console.log('Todolist')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return;\r\n    }\r\n    const thunk = fetchTasksTC(props.todolist.id);\r\n    dispatch(thunk)\r\n  },[])\r\n\r\n  let allTodolistTasks = props.tasks\r\n  let tasksForTodolist = allTodolistTasks\r\n\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed);\r\n  }\r\n\r\n\r\n  const tasksJSXElements = tasksForTodolist.map(t => {\r\n    return <Task\r\n      key = {t.id}\r\n      todolistId = {props.todolist.id}\r\n      task = {t}\r\n      changeTaskStatus = {props.changeTaskStatus}\r\n      changeTaskTitle = {props.changeTaskTitle}\r\n      removeTask = {props.removeTask}\r\n    />\r\n  })\r\n\r\n  const addTask = useCallback((title: string) => props.addTask(title, props.todolist.id), [props.addTask, props.todolist.id])\r\n  const changeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(title, props.todolist.id),[])\r\n\r\n  const onClickAllFilter = useCallback(() => props.changeFilter('all', props.todolist.id),[])\r\n  const onClickActiveFilter = useCallback(() => props.changeFilter('active', props.todolist.id),[])\r\n  const onClickCompletedFilter = useCallback(() => props.changeFilter('completed', props.todolist.id),[])\r\n\r\n  const removeTodoList = () => {\r\n    props.removeTodoList(props.todolist.id)\r\n  }\r\n\r\n\r\n  return <div>\r\n    <h3>\r\n      <EditableSpan title={props.todolist.title} changeTitle={changeTodoListTitle}/>\r\n      <IconButton onClick={removeTodoList} disabled={props.todolist.entityStatus === 'loading'}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </h3>\r\n    <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n\r\n    {tasksJSXElements}\r\n    <div>\r\n      <Button\r\n        variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n        onClick={onClickAllFilter}\r\n        color={'default'}\r\n      >All</Button>\r\n      <Button\r\n        variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n        onClick={onClickActiveFilter}\r\n        color={'primary'}\r\n      >Active</Button>\r\n      <Button\r\n        variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n        onClick={onClickCompletedFilter}\r\n        color={'secondary'}\r\n      >Completed</Button>\r\n    </div>\r\n  </div>\r\n\r\n})\r\n\r\nexport default TodoList;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodoListDomainType\r\n} from \"./todolists-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport TodoList from \"./Todolist/TodoList\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n  const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return\r\n    }\r\n    const thunk = fetchTodolistsTC();\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n    const thunk = removeTaskTC(taskID, todoListID)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTask = useCallback((title: string, todoListID: string) => {\r\n    const thunk = addTaskTC(title, todoListID)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todoListID: string) => {\r\n    const thunk = updateTaskTC(taskID, {status}, todoListID)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTaskTitle = useCallback((taskID: string, taskTitle: string, todoListID: string) => {\r\n    const thunk = updateTaskTC(taskID, {title: taskTitle}, todoListID)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTodoListFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n    const action = changeTodolistFilterAC(filter, todoListID)\r\n    dispatch(action)\r\n  }, [])\r\n\r\n  const removeTodoList = useCallback((todoListID: string) => {\r\n    const thunk = removeTodolistTC(todoListID)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\r\n    const thunk = changeTodolistTitleTC(title, todoListID)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTodoList = useCallback((title: string) => {\r\n    const thunk = addTodolistTC(title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={'login'} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{padding: \"20px\"}}>\r\n        <AddItemForm addItem={addTodoList}/>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {\r\n          todoLists.map(tl => {\r\n            return (\r\n              <Grid item key={tl.id}>\r\n                <Paper style={{padding: \"10px\"}}>\r\n                  <TodoList\r\n                    key={tl.id}\r\n                    todolist={tl}\r\n                    tasks={tasks[tl.id]}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                    demo={demo}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            )\r\n          })\r\n        }\r\n      </Grid>\r\n    </>\r\n  )\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbars() {\r\n    // const [open, setOpen] = React.useState(true);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email if required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered <a href='https://social-network.samuraijs.com/'\r\n                                                       target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email\r\n                        && formik.errors.email\r\n                            ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from \"../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbars} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbars/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todoListsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todoListsReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}