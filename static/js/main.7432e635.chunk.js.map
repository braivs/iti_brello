{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","validatedTitle","trim","addItem","errorMessage","style","color","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList","filter","tasksJSXElements","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","copyTasks","newTask","changeTodoListFilter","tl","todoListComponents","tasksForTodolist","getFilteredTasks","Grid","item","Paper","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7432e635.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n  const [title, setTitle] = useState('')\r\n  const [error, setError] = useState<boolean>(false)\r\n\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    setError(false)\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      onClickAddItem()\r\n    }\r\n  }\r\n  const onClickAddItem = () => {\r\n    const validatedTitle = title.trim()\r\n    if (validatedTitle) {\r\n      props.addItem(validatedTitle)\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setTitle('')\r\n  }\r\n\r\n  const errorMessage = error\r\n    ? <div style={{color: 'red'}}>Title is required!</div>\r\n    : null\r\n\r\n  return (\r\n    <div>\r\n      <TextField variant=\"outlined\"\r\n                 error={error}\r\n                 value={title}\r\n                 onChange={onChangeTitle}\r\n                 onKeyPress={onKeyPressAddItem}\r\n                 label='Text'\r\n                 helperText={errorMessage}\r\n      />\r\n      <IconButton color='primary' onClick={onClickAddItem}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n  const [title, setTitle] = useState<string>(props.title)\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const onEditMode = () => setEditMode(true)\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeTitle(title)\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n  const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      offEditMode()\r\n    }\r\n  }\r\n\r\n  return (\r\n    editMode\r\n      ? <TextField variant=\"outlined\"\r\n                   value={title}\r\n                   autoFocus\r\n                   onBlur={offEditMode}\r\n                   onChange={onChangeTitle}\r\n                   onKeyPress={onEnterPressOffEditMode}\r\n      />\r\n      : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n  )\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ntype TodoListPropsType = {\r\n  todoListID: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  addTask: (title: string, todoListID: string) => void\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  changeFilter: (FilterValues: FilterValuesType, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n  changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n  const {filter} = props\r\n\r\n  const tasksJSXElements = props.tasks.map(t => {\r\n    const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n      props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n    }\r\n    const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.todoListID)\r\n\r\n    return (\r\n      <div key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n          checked={t.isDone}\r\n          color=\"primary\"\r\n          onChange={changeTaskStatus}\r\n        />\r\n        <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n        <IconButton onClick={removeTask}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n  const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n  const onClickAllFilter = () => props.changeFilter('all', props.todoListID)\r\n  const onClickActiveFilter = () => props.changeFilter('active', props.todoListID)\r\n  const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListID)\r\n\r\n  const removeTodoList = () => {\r\n    props.removeTodoList(props.todoListID)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n        <IconButton onClick={removeTodoList}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask}/>\r\n      {tasksJSXElements}\r\n      <div>\r\n        <Button\r\n          variant={filter === 'all' ? 'outlined' : 'text'}\r\n          onClick={onClickAllFilter}\r\n          color={'default'}\r\n        >All</Button>\r\n        <Button\r\n          variant={filter === 'active' ? 'outlined' : 'text'}\r\n          onClick={onClickActiveFilter}\r\n          color={'primary'}\r\n        >Active</Button>\r\n        <Button\r\n          variant={filter === 'completed' ? 'outlined' : 'text'}\r\n          onClick={onClickCompletedFilter}\r\n          color={'secondary'}\r\n        >Completed</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n  // BLL:\r\n  const todoListID_1 = v1()\r\n  const todoListID_2 = v1()\r\n\r\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n    {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n    {id: todoListID_2, title: 'What to buy', filter: 'all'}\r\n  ])\r\n  const [tasks, setTasks] = useState<TasksStateType>({\r\n    [todoListID_1]: [\r\n      {id: v1(), title: 'HTML & CSS', isDone: false},\r\n      {id: v1(), title: 'JS', isDone: false},\r\n      {id: v1(), title: 'React', isDone: true},\r\n    ],\r\n    [todoListID_2]: [\r\n      {id: v1(), title: 'Milk', isDone: false},\r\n      {id: v1(), title: 'Bread', isDone: false},\r\n      {id: v1(), title: 'Potato', isDone: true},\r\n    ]\r\n  })\r\n\r\n  function removeTask(taskID: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n    setTasks(copyTasks);\r\n  }\r\n  function addTask(title: string, todoListID: string) {\r\n    const newTask: TaskType = {\r\n      id: v1(),\r\n      title,\r\n      isDone: false\r\n    }\r\n    setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n  }\r\n  function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n    setTasks(copyTasks);\r\n  }\r\n  function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)\r\n    setTasks(copyTasks);\r\n  }\r\n\r\n  function changeTodoListFilter(filter: FilterValuesType, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: filter} : tl))\r\n  }\r\n  function changeTodoListTitle(title: string, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n  }\r\n  function removeTodoList(todoListID: string) {\r\n    setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n    const copyTasks = {...tasks}\r\n    delete copyTasks[todoListID]\r\n    setTasks(copyTasks)\r\n  }\r\n  function addTodoList(title: string) {\r\n    const newTodoListID = v1()\r\n    const newTodoList: TodoListType = {\r\n      id: newTodoListID,\r\n      title,\r\n      filter: 'all'\r\n    }\r\n    setTodoLists([...todoLists, newTodoList])\r\n    setTasks({...tasks, [newTodoListID]: []})\r\n  }\r\n\r\n  // UI:\r\n  function getFilteredTasks(tl: TodoListType) {\r\n    switch (tl.filter) {\r\n      case 'active':\r\n        return tasks[tl.id].filter(t => !t.isDone)\r\n      case 'completed':\r\n        return tasks[tl.id].filter(t => t.isDone)\r\n      default:\r\n        return tasks[tl.id]\r\n    }\r\n  }\r\n\r\n  const todoListComponents = todoLists.map(tl => {\r\n    const tasksForTodolist = getFilteredTasks(tl)\r\n    return <Grid item>\r\n      <Paper style={{padding: '10px'}}>\r\n        <TodoList\r\n          key={tl.id}\r\n          todoListID={tl.id}\r\n          title={tl.title}\r\n          tasks={tasksForTodolist}\r\n          filter={tl.filter}\r\n          addTask={addTask}\r\n          removeTask={removeTask}\r\n          removeTodoList={removeTodoList}\r\n          changeFilter={changeTodoListFilter}\r\n          changeTaskStatus={changeTaskStatus}\r\n          changeTaskTitle={changeTaskTitle}\r\n          changeTodoListTitle={changeTodoListTitle}\r\n        />\r\n      </Paper>\r\n    </Grid>\r\n  })\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Grid container style={{padding: '20px'}}>\r\n          <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {todoListComponents}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}